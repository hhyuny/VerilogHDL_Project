
MOTOR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000456  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080014a  0080014a  00000534  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014bc  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf2  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a7  00000000  00000000  0000273a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005af  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b9  00000000  00000000  00003733  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003cec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 34       	cpi	r26, 0x4A	; 74
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e4       	ldi	r26, 0x4A	; 74
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 34       	cpi	r26, 0x4B	; 75
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0d d1       	rcall	.+538    	; 0x2de <main>
  c4:	c6 c1       	rjmp	.+908    	; 0x452 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Button_init>:
﻿#include "button.h"
void Button_init(Button *button, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum){
  c8:	fc 01       	movw	r30, r24
	button->ddr=ddr;
  ca:	71 83       	std	Z+1, r23	; 0x01
  cc:	60 83       	st	Z, r22
	button->pin=pin;
  ce:	53 83       	std	Z+3, r21	; 0x03
  d0:	42 83       	std	Z+2, r20	; 0x02
	button->btnPin=pinNum;
  d2:	24 83       	std	Z+4, r18	; 0x04
	button->prevState=RELEASED;											//초기화로 아무것도 안누른 상태
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	85 83       	std	Z+5, r24	; 0x05
	*button->ddr &= ~(1<<button->btnPin);								//버튼 핀을 입력으로 설정
  d8:	fb 01       	movw	r30, r22
  da:	30 81       	ld	r19, Z
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <Button_init+0x1e>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	2a 95       	dec	r18
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <Button_init+0x1a>
  ea:	80 95       	com	r24
  ec:	83 23       	and	r24, r19
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <BUTTON_getState>:
}
// Button
uint8_t BUTTON_getState(Button*button){
  f2:	fc 01       	movw	r30, r24
	uint8_t curState = *button->pin & (1<<button->btnPin);				//버튼 상태를 읽어옴
  f4:	a2 81       	ldd	r26, Z+2	; 0x02
  f6:	b3 81       	ldd	r27, Z+3	; 0x03
  f8:	8c 91       	ld	r24, X
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	04 80       	ldd	r0, Z+4	; 0x04
 100:	02 c0       	rjmp	.+4      	; 0x106 <BUTTON_getState+0x14>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <BUTTON_getState+0x10>
 10a:	28 23       	and	r18, r24
	
	if((curState==PUSHED)&&(button->prevState==RELEASED))				//안누른 상태에서 누르면
 10c:	71 f4       	brne	.+28     	; 0x12a <BUTTON_getState+0x38>
 10e:	85 81       	ldd	r24, Z+5	; 0x05
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	59 f4       	brne	.+22     	; 0x12a <BUTTON_getState+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	30 e7       	ldi	r19, 0x70	; 112
 118:	92 e0       	ldi	r25, 0x02	; 2
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	30 40       	sbci	r19, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <BUTTON_getState+0x28>
 122:	00 c0       	rjmp	.+0      	; 0x124 <BUTTON_getState+0x32>
 124:	00 00       	nop
	{
		
		_delay_ms(50);													//debounce코드
		button->prevState=PUSHED;										//버튼 상태를 누른 상태로 변환
 126:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSH;												//버튼이 눌렀음을 반환
 128:	08 95       	ret
	}
	else if((curState!=PUSHED) && (button->prevState==PUSHED))			//버튼은 누른 상태
 12a:	22 23       	and	r18, r18
 12c:	81 f0       	breq	.+32     	; 0x14e <BUTTON_getState+0x5c>
 12e:	85 81       	ldd	r24, Z+5	; 0x05
 130:	81 11       	cpse	r24, r1
 132:	0f c0       	rjmp	.+30     	; 0x152 <BUTTON_getState+0x60>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	30 e7       	ldi	r19, 0x70	; 112
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	30 40       	sbci	r19, 0x00	; 0
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <BUTTON_getState+0x48>
 142:	00 c0       	rjmp	.+0      	; 0x144 <BUTTON_getState+0x52>
 144:	00 00       	nop
	{
		
		_delay_ms(50);
		button->prevState=RELEASED;									//버튼 상태를 뗀 상태로 변환
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;											//버튼이 떨어졌으면 반환
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	08 95       	ret
	}
	return NO_ACT;														//아무것도 안했을 때
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
}
 154:	08 95       	ret

00000156 <I2C_Init>:
#include "I2C.h"

void I2C_Init()
{
	I2C_DDR |= (1<<I2C_SCL) | (1<<I2C_SDA);		// 출력 설정
 156:	81 b3       	in	r24, 0x11	; 17
 158:	83 60       	ori	r24, 0x03	; 3
 15a:	81 bb       	out	0x11, r24	; 17
	TWBR = 72;									// 100KHz
 15c:	88 e4       	ldi	r24, 0x48	; 72
 15e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 162:	08 95       	ret

00000164 <I2C_Start>:
	// TWBR = 12;	// 400KHz
}

void I2C_Start()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	
 164:	84 ea       	ldi	r24, 0xA4	; 164
 166:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	// TWINT에 1을 셋트하여 인터럽트를 발생시키는 것 같지만
	// 소프트웨어적으로 1을 셋트하여 플래그를 클리어함
	while(!(TWCR & (1<<TWINT)));	// 하드웨어적으로 TWINT 시점을 결정
 16a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 16e:	88 23       	and	r24, r24
 170:	e4 f7       	brge	.-8      	; 0x16a <I2C_Start+0x6>
}
 172:	08 95       	ret

00000174 <I2C_Stop>:

void I2C_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);	// stop 비트 설정
 174:	84 e9       	ldi	r24, 0x94	; 148
 176:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 17a:	08 95       	ret

0000017c <I2C_TxData>:
}

void I2C_TxData(uint8_t data)	// data 1 바이트 전송
{
	TWDR = data;
 17c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
 180:	84 e8       	ldi	r24, 0x84	; 132
 182:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWINT)));	// 전송 완료 대기
 186:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 18a:	88 23       	and	r24, r24
 18c:	e4 f7       	brge	.-8      	; 0x186 <I2C_TxData+0xa>
}
 18e:	08 95       	ret

00000190 <I2C_TxByte>:

void I2C_TxByte(uint8_t devAddrRW, uint8_t data)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	d8 2f       	mov	r29, r24
 196:	c6 2f       	mov	r28, r22
	I2C_Start();
 198:	e5 df       	rcall	.-54     	; 0x164 <I2C_Start>
	I2C_TxData(devAddrRW);
 19a:	8d 2f       	mov	r24, r29
 19c:	ef df       	rcall	.-34     	; 0x17c <I2C_TxData>
	I2C_TxData(data);
 19e:	8c 2f       	mov	r24, r28
 1a0:	ed df       	rcall	.-38     	; 0x17c <I2C_TxData>
	I2C_Stop();
 1a2:	e8 df       	rcall	.-48     	; 0x174 <I2C_Stop>
 1a4:	df 91       	pop	r29
}
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <LCD_EnablePin>:
 1aa:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__data_end>
	LCD_EnablePin();
}

void LCD_EnablePin()
{
	I2C_LCD_Data &= ~(1<<LCD_E);									//E LOW 설정
 1ae:	6b 7f       	andi	r22, 0xFB	; 251
 1b0:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 1b4:	8e e4       	ldi	r24, 0x4E	; 78
 1b6:	ec df       	rcall	.-40     	; 0x190 <I2C_TxByte>
	
	I2C_LCD_Data |= (1<<LCD_E);										//HIGH 설정
 1b8:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__data_end>
 1bc:	64 60       	ori	r22, 0x04	; 4
 1be:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 1c2:	8e e4       	ldi	r24, 0x4E	; 78
 1c4:	e5 df       	rcall	.-54     	; 0x190 <I2C_TxByte>
	
	I2C_LCD_Data &= ~(1<<LCD_E);									//E LOW 설정
 1c6:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__data_end>
 1ca:	6b 7f       	andi	r22, 0xFB	; 251
 1cc:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 1d0:	8e e4       	ldi	r24, 0x4E	; 78
 1d2:	de df       	rcall	.-68     	; 0x190 <I2C_TxByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	8f e1       	ldi	r24, 0x1F	; 31
 1d6:	9c e1       	ldi	r25, 0x1C	; 28
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCD_EnablePin+0x2e>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCD_EnablePin+0x34>
 1de:	00 00       	nop
 1e0:	08 95       	ret

000001e2 <LCD_Data4bit>:
#include "I2C_LCD.h"

uint8_t I2C_LCD_Data;

void LCD_Data4bit(uint8_t data)
{
 1e2:	cf 93       	push	r28
 1e4:	c8 2f       	mov	r28, r24
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | (data & 0xf0);			//상위 4비트 사용
 1e6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
 1ea:	8f 70       	andi	r24, 0x0F	; 15
 1ec:	9c 2f       	mov	r25, r28
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	89 2b       	or	r24, r25
 1f2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
	LCD_EnablePin();
 1f6:	d9 df       	rcall	.-78     	; 0x1aa <LCD_EnablePin>
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | ((data & 0x0f) << 4);	//하위 4비트 사용
 1f8:	20 e1       	ldi	r18, 0x10	; 16
 1fa:	c2 9f       	mul	r28, r18
 1fc:	c0 01       	movw	r24, r0
 1fe:	11 24       	eor	r1, r1
 200:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <__data_end>
 204:	9f 70       	andi	r25, 0x0F	; 15
 206:	89 2b       	or	r24, r25
 208:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
	LCD_EnablePin();
 20c:	ce df       	rcall	.-100    	; 0x1aa <LCD_EnablePin>
}
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_WriteCommand>:
	_delay_us(1800);
}

void LCD_WriteCommand(uint8_t commandData)
{
	I2C_LCD_Data &= ~(1<<LCD_RS);									//RS LOW - COMMAND MODE
 212:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <__data_end>
	I2C_LCD_Data &= ~(1<<LCD_RW);									//RW LOW - Write MODE
 216:	9c 7f       	andi	r25, 0xFC	; 252
 218:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <__data_end>
	LCD_Data4bit(commandData);	
 21c:	e2 cf       	rjmp	.-60     	; 0x1e2 <LCD_Data4bit>
 21e:	08 95       	ret

00000220 <LCD_WriteData>:
}

void LCD_WriteData(uint8_t charData)
{
	I2C_LCD_Data |= (1<<LCD_RS);									//RS HIGH - DATA MODE
 220:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <__data_end>
 224:	91 60       	ori	r25, 0x01	; 1
	I2C_LCD_Data &= ~(1<<LCD_RW);									//RW LOW  - Write MODE
 226:	9d 7f       	andi	r25, 0xFD	; 253
 228:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <__data_end>
	LCD_Data4bit(charData);
 22c:	da cf       	rjmp	.-76     	; 0x1e2 <LCD_Data4bit>
 22e:	08 95       	ret

00000230 <LCD_BackLightOn>:
}

void LCD_BackLightOn()
{
	I2C_LCD_Data |= (1<<LCD_BACKLIGHT);								//LCD 백라이트 비트 설정
 230:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__data_end>
 234:	68 60       	ori	r22, 0x08	; 8
 236:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);							//I2C 통신 데이터 전송
 23a:	8e e4       	ldi	r24, 0x4E	; 78
 23c:	a9 cf       	rjmp	.-174    	; 0x190 <I2C_TxByte>
 23e:	08 95       	ret

00000240 <LCD_GotoXY>:
}

void LCD_GotoXY(uint8_t row, uint8_t col)
{
	row %= 2;														//행 row 0~1까지 2*16 LCD Display
 240:	81 70       	andi	r24, 0x01	; 1
	col %= 16;														//열 column	0~15까지
 242:	6f 70       	andi	r22, 0x0F	; 15
	uint8_t address = (0x40 * row) + col;
 244:	90 e4       	ldi	r25, 0x40	; 64
 246:	89 9f       	mul	r24, r25
 248:	60 0d       	add	r22, r0
 24a:	11 24       	eor	r1, r1
 24c:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + address;
	LCD_WriteCommand(command);
 24e:	80 58       	subi	r24, 0x80	; 128
 250:	e0 cf       	rjmp	.-64     	; 0x212 <LCD_WriteCommand>
 252:	08 95       	ret

00000254 <LCD_WriteString>:
}

void LCD_WriteString(char *string)									
{
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	8c 01       	movw	r16, r24
	for(uint8_t i=0; string[i]; i++)
 25c:	c0 e0       	ldi	r28, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]);
 260:	df df       	rcall	.-66     	; 0x220 <LCD_WriteData>
	LCD_WriteCommand(command);
}

void LCD_WriteString(char *string)									
{
	for(uint8_t i=0; string[i]; i++)
 262:	cf 5f       	subi	r28, 0xFF	; 255
 264:	f8 01       	movw	r30, r16
 266:	ec 0f       	add	r30, r28
 268:	f1 1d       	adc	r31, r1
 26a:	80 81       	ld	r24, Z
 26c:	81 11       	cpse	r24, r1
 26e:	f8 cf       	rjmp	.-16     	; 0x260 <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]);
	}
}
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	08 95       	ret

00000278 <LCD_WriteStringXY>:

void LCD_WriteStringXY(uint8_t row, uint8_t col, char *string)		//문자열 LCD 출력
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ea 01       	movw	r28, r20
	LCD_GotoXY(row, col);
 27e:	e0 df       	rcall	.-64     	; 0x240 <LCD_GotoXY>
	LCD_WriteString(string);
 280:	ce 01       	movw	r24, r28
 282:	e8 df       	rcall	.-48     	; 0x254 <LCD_WriteString>
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <LCD_Init>:

void LCD_Init()														//I2C 통신 초기화
{
	I2C_Init();
 28a:	65 df       	rcall	.-310    	; 0x156 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	2f ef       	ldi	r18, 0xFF	; 255
 28e:	89 ef       	ldi	r24, 0xF9	; 249
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	21 50       	subi	r18, 0x01	; 1
 294:	80 40       	sbci	r24, 0x00	; 0
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <LCD_Init+0x8>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_Init+0x12>
 29c:	00 00       	nop
	
	_delay_ms(20);													//초기화 대기시간
	LCD_WriteCommand(0x03);
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	b8 df       	rcall	.-144    	; 0x212 <LCD_WriteCommand>
 2a2:	8f e3       	ldi	r24, 0x3F	; 63
 2a4:	9c e9       	ldi	r25, 0x9C	; 156
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_Init+0x1c>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_Init+0x22>
	_delay_ms(10);
	LCD_WriteCommand(0x03);
 2ac:	00 00       	nop
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	b0 df       	rcall	.-160    	; 0x212 <LCD_WriteCommand>
 2b2:	8f e9       	ldi	r24, 0x9F	; 159
 2b4:	9f e0       	ldi	r25, 0x0F	; 15
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_Init+0x2c>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_Init+0x32>
	_delay_ms(1);
	LCD_WriteCommand(0x03);
 2bc:	00 00       	nop
 2be:	83 e0       	ldi	r24, 0x03	; 3
	
	LCD_WriteCommand(0x02);									
 2c0:	a8 df       	rcall	.-176    	; 0x212 <LCD_WriteCommand>
 2c2:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteCommand(COMMAND_4_BIT_MODE);
 2c4:	a6 df       	rcall	.-180    	; 0x212 <LCD_WriteCommand>
 2c6:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 2c8:	a4 df       	rcall	.-184    	; 0x212 <LCD_WriteCommand>
 2ca:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 2cc:	a2 df       	rcall	.-188    	; 0x212 <LCD_WriteCommand>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	a0 df       	rcall	.-192    	; 0x212 <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	9e df       	rcall	.-196    	; 0x212 <LCD_WriteCommand>
 2d6:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 2d8:	9c df       	rcall	.-200    	; 0x212 <LCD_WriteCommand>
 2da:	aa cf       	rjmp	.-172    	; 0x230 <LCD_BackLightOn>
 2dc:	08 95       	ret

000002de <main>:
	LCD_BackLightOn();
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	cd b7       	in	r28, 0x3d	; 61
#include "I2C_LCD.h"
#include "button.h"


int main(void)
{
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	e6 97       	sbiw	r28, 0x36	; 54
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
	LED_DDR = 0xff;														//LED포트 출력 설정												
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	Button btnOn;														//구조체 변수 설정
	Button btnOff;														//상태 저장
	Button btnTog;
	Button btnPin;
	
	Button_init(&btnOn, &BUTTON_DDR, &BUTTON_PIN, BUTTON_ON);			//버튼 초기화
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	43 e3       	ldi	r20, 0x33	; 51
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	64 e3       	ldi	r22, 0x34	; 52
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	ce 01       	movw	r24, r28
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	e0 de       	rcall	.-576    	; 0xc8 <Button_init>
	Button_init(&btnOff, &BUTTON_DDR, &BUTTON_PIN, BUTTON_OFF);			//DDR - 데이터 레지스터
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	43 e3       	ldi	r20, 0x33	; 51
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	64 e3       	ldi	r22, 0x34	; 52
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	ce 01       	movw	r24, r28
 314:	07 96       	adiw	r24, 0x07	; 7
 316:	d8 de       	rcall	.-592    	; 0xc8 <Button_init>
	Button_init(&btnTog, &BUTTON_DDR, &BUTTON_PIN, BUTTON_TOGGLE);		//PIN - 핀 상태 읽는 레지스터
 318:	22 e0       	ldi	r18, 0x02	; 2
 31a:	43 e3       	ldi	r20, 0x33	; 51
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	64 e3       	ldi	r22, 0x34	; 52
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	ce 01       	movw	r24, r28
 324:	0d 96       	adiw	r24, 0x0d	; 13
 326:	d0 de       	rcall	.-608    	; 0xc8 <Button_init>
	Button_init(&btnPin, &BUTTON_DDR, &BUTTON_PIN, BUTTON_TOGGLE1);
 328:	23 e0       	ldi	r18, 0x03	; 3
 32a:	43 e3       	ldi	r20, 0x33	; 51
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	64 e3       	ldi	r22, 0x34	; 52
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	ce 01       	movw	r24, r28
 334:	43 96       	adiw	r24, 0x13	; 19
 336:	c8 de       	rcall	.-624    	; 0xc8 <Button_init>
	
	
	//buzzerInit();
	TCCR0 |= (0<<CS02) | (1<<CS01) | (0<<CS00);	//타이머/카운터 클락 분주비 설정 분주비 8
 338:	83 b7       	in	r24, 0x33	; 51
 33a:	82 60       	ori	r24, 0x02	; 2
 33c:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01) | (1<<WGM00);			//WGM01, WGM00 비트를 1로 설정 Fast PWM MODE 설정
 33e:	83 b7       	in	r24, 0x33	; 51
 340:	88 64       	ori	r24, 0x48	; 72
 342:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01) | (0<<COM00);			//COM01 - 1, COM00 - 0 설정 비반전 MODE 설정
 344:	83 b7       	in	r24, 0x33	; 51
 346:	80 62       	ori	r24, 0x20	; 32
 348:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0;									//타이머/카운터 출력 비교 레지스터 초기값 0
	DDRB |= (1<<4);								//PWM PB4번 핀 사용 
 34a:	11 be       	out	0x31, r1	; 49
 34c:	87 b3       	in	r24, 0x17	; 23
	
	//powerBuzzer();
	char buff[30];
	LCD_Init();
 34e:	80 61       	ori	r24, 0x10	; 16
 350:	87 bb       	out	0x17, r24	; 23
	//LCD_WriteStringXY(0,0,buff);
	//LCD_WriteStringXY(0,0,"PARKJIHOON");
	
	while (1)
	{
		if(BUTTON_getState(&btnOn)==ACT_RELEASED)		 
 352:	9b df       	rcall	.-202    	; 0x28a <LCD_Init>
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	cc de       	rcall	.-616    	; 0xf2 <BUTTON_getState>
 35a:	82 30       	cpi	r24, 0x02	; 2
		{
			LED_PORT = 0x01;							//LED 1번 출력
 35c:	d1 f4       	brne	.+52     	; 0x392 <main+0xb4>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);	//디스플레이 초기화 후 재송출
 364:	56 df       	rcall	.-340    	; 0x212 <LCD_WriteCommand>
			OCR0 = 90;									//선풍기 속도 제어 30%
 366:	8a e5       	ldi	r24, 0x5A	; 90
 368:	81 bf       	out	0x31, r24	; 49
			sprintf(buff, "PARKJIHOON");
 36a:	8b e0       	ldi	r24, 0x0B	; 11
 36c:	e0 e0       	ldi	r30, 0x00	; 0
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	de 01       	movw	r26, r28
 372:	59 96       	adiw	r26, 0x19	; 25
 374:	01 90       	ld	r0, Z+
 376:	0d 92       	st	X+, r0
 378:	8a 95       	dec	r24
			LCD_WriteStringXY(0,0,buff);
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0x96>
 37c:	ae 01       	movw	r20, r28
 37e:	47 5e       	subi	r20, 0xE7	; 231
 380:	5f 4f       	sbci	r21, 0xFF	; 255
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	80 e0       	ldi	r24, 0x00	; 0
			//sprintf(buff, "WIND Stats :30");
			//LCD_WriteStringXY(1,0,buff);
			LCD_WriteStringXY(1,0,"WIND Stats:30%");	//속도 표시
 386:	78 df       	rcall	.-272    	; 0x278 <LCD_WriteStringXY>
 388:	4b e0       	ldi	r20, 0x0B	; 11
 38a:	51 e0       	ldi	r21, 0x01	; 1
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	73 df       	rcall	.-282    	; 0x278 <LCD_WriteStringXY>
		}
		if(BUTTON_getState(&btnOff)==ACT_RELEASED)
 392:	ce 01       	movw	r24, r28
 394:	07 96       	adiw	r24, 0x07	; 7
 396:	ad de       	rcall	.-678    	; 0xf2 <BUTTON_getState>
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	d9 f4       	brne	.+54     	; 0x3d2 <main+0xf4>
		{
			LED_PORT = 0x03;							//LED 1,2번 출력
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);	//디스플레이 초기화 후 재송출
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	36 df       	rcall	.-404    	; 0x212 <LCD_WriteCommand>
 3a6:	86 e9       	ldi	r24, 0x96	; 150
			OCR0 = 150;									//선풍기 속도 제어 65%
 3a8:	81 bf       	out	0x31, r24	; 49
 3aa:	8b e0       	ldi	r24, 0x0B	; 11
			sprintf(buff, "PARKJIHOON");
 3ac:	e0 e0       	ldi	r30, 0x00	; 0
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	de 01       	movw	r26, r28
 3b2:	59 96       	adiw	r26, 0x19	; 25
 3b4:	01 90       	ld	r0, Z+
 3b6:	0d 92       	st	X+, r0
 3b8:	8a 95       	dec	r24
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0xd6>
			LCD_WriteStringXY(0,0,buff);
 3bc:	ae 01       	movw	r20, r28
 3be:	47 5e       	subi	r20, 0xE7	; 231
 3c0:	5f 4f       	sbci	r21, 0xFF	; 255
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	58 df       	rcall	.-336    	; 0x278 <LCD_WriteStringXY>
			//sprintf(buff, "WIND Stats :  65");
			//LCD_WriteStringXY(1,0,buff);
			LCD_WriteStringXY(1,0,"WIND Stats:65%");	//속도 표시
 3c8:	4a e1       	ldi	r20, 0x1A	; 26
 3ca:	51 e0       	ldi	r21, 0x01	; 1
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	53 df       	rcall	.-346    	; 0x278 <LCD_WriteStringXY>
		}
		if(BUTTON_getState(&btnTog)==ACT_RELEASED)
 3d2:	ce 01       	movw	r24, r28
 3d4:	0d 96       	adiw	r24, 0x0d	; 13
 3d6:	8d de       	rcall	.-742    	; 0xf2 <BUTTON_getState>
 3d8:	82 30       	cpi	r24, 0x02	; 2
 3da:	d9 f4       	brne	.+54     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3dc:	87 e0       	ldi	r24, 0x07	; 7
		{
			LED_PORT = 0x07;							//LED 1,2,3번 출력
 3de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3e2:	81 e0       	ldi	r24, 0x01	; 1
			LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);	//디스플레이 초기화 후 재송출
 3e4:	16 df       	rcall	.-468    	; 0x212 <LCD_WriteCommand>
 3e6:	8a ef       	ldi	r24, 0xFA	; 250
 3e8:	81 bf       	out	0x31, r24	; 49
			OCR0 = 250;									//선풍기 속도 제어 100%
 3ea:	8b e0       	ldi	r24, 0x0B	; 11
			sprintf(buff, "PARKJIHOON");
 3ec:	e0 e0       	ldi	r30, 0x00	; 0
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	de 01       	movw	r26, r28
 3f2:	59 96       	adiw	r26, 0x19	; 25
 3f4:	01 90       	ld	r0, Z+
 3f6:	0d 92       	st	X+, r0
 3f8:	8a 95       	dec	r24
			LCD_WriteStringXY(0,0,buff);
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x116>
 3fc:	ae 01       	movw	r20, r28
 3fe:	47 5e       	subi	r20, 0xE7	; 231
 400:	5f 4f       	sbci	r21, 0xFF	; 255
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	80 e0       	ldi	r24, 0x00	; 0
			//sprintf(buff, "WIND Stats : 100");
			//LCD_WriteStringXY(1,0,buff);
			LCD_WriteStringXY(1,0,"WIND Stats:100%");	//속도 표시
 406:	38 df       	rcall	.-400    	; 0x278 <LCD_WriteStringXY>
 408:	49 e2       	ldi	r20, 0x29	; 41
 40a:	51 e0       	ldi	r21, 0x01	; 1
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	33 df       	rcall	.-410    	; 0x278 <LCD_WriteStringXY>
		}
		if(BUTTON_getState(&btnPin)==ACT_RELEASED)
 412:	ce 01       	movw	r24, r28
 414:	43 96       	adiw	r24, 0x13	; 19
 416:	6d de       	rcall	.-806    	; 0xf2 <BUTTON_getState>
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	9b cf       	rjmp	.-202    	; 0x354 <main+0x76>
 41e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		{
			LED_PORT = 0x00;							//LED 전체 OFF
			LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);	//디스플레이 초기화 후 재송출
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	f6 de       	rcall	.-532    	; 0x212 <LCD_WriteCommand>
 426:	11 be       	out	0x31, r1	; 49
			OCR0 = 0;									//선풍기 STOP
 428:	8b e0       	ldi	r24, 0x0B	; 11
			sprintf(buff, "PARKJIHOON");
 42a:	e0 e0       	ldi	r30, 0x00	; 0
 42c:	f1 e0       	ldi	r31, 0x01	; 1
 42e:	de 01       	movw	r26, r28
 430:	59 96       	adiw	r26, 0x19	; 25
 432:	01 90       	ld	r0, Z+
 434:	0d 92       	st	X+, r0
 436:	8a 95       	dec	r24
 438:	e1 f7       	brne	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
			LCD_WriteStringXY(0,0,buff);
 43a:	ae 01       	movw	r20, r28
 43c:	47 5e       	subi	r20, 0xE7	; 231
 43e:	5f 4f       	sbci	r21, 0xFF	; 255
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	19 df       	rcall	.-462    	; 0x278 <LCD_WriteStringXY>
 446:	49 e3       	ldi	r20, 0x39	; 57
			//sprintf(buff, "WIND Stats :STOP");
			//LCD_WriteStringXY(1,0,buff);
			LCD_WriteStringXY(1,0,"WIND Stats:STOP");	//속도 표시
 448:	51 e0       	ldi	r21, 0x01	; 1
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	14 df       	rcall	.-472    	; 0x278 <LCD_WriteStringXY>
 450:	81 cf       	rjmp	.-254    	; 0x354 <main+0x76>

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
